//------------------------------------------------------------------
// Imports

@import 'Emmanuel/Colours';
@import 'Emmanuel/Fonts';
@import 'Emmanuel/Lists';
@import 'Emmanuel/Tables';
@import 'Emmanuel/Blockquotes';
@import 'Emmanuel/Buttons';
@import 'Emmanuel/Forms';
@import 'Emmanuel/Spacing';
@import 'Emmanuel/LoginPage';

//------------------------------------------------------------------
// Grid Overrides

$globalWidth: 110rem;
$globalWidthPX: 1100px;
$globalWidthMax: 144rem;
$globalWidthMaxPX: 1440px;
$columnCount: 12;
$gutterWidth: 2rem;

// Include neccessary column numbers for project here - HINT: false = no classes;
$rowClasses: 2, 3, 4, 5, 6, 7; // e.g md-up-4
$columnClasses: 3, 4, 6, 7, 8, 9, 10; // e.g md-4

// Include neccessary breakpoints for project here;
$breakpoint-map: (
  'md': $md,
  'xmd': $xmd,
  'lg': $lg,
);

//------------------------------------------------------------------
// Components

@include TheGrid;

// Inject these includes with $breakpoint-map if needed
//------------------------------------------------------------------
@include TextAlignmentClasses;
// @include FloatClasses($breakpoint-map);
// @include ShowHideClasses($breakpoint-map);
@include TableAlignmentClasses($breakpoint-map);
//------------------------------------------------------------------

@include ColorClasses;

// Generic Styles 
//------------------------------------------------------------------
@include FontStyles;
@include ListStyles;
@include TableStyles;
@include BlockquoteStyles;
@include Buttons;
@include FormStyles;
@include SpacingStyles;

//------------------------------------------------------------------
// Global Variables

$logoDimentions: 202,48;

//------------------------------------------------------------------
// Base Styles

html,
body {
  @include font;
}

a {
  color: $primary;
  text-decoration: none;
}

button::-moz-focus-inner {
  border: 0;
}

.js-hide {
  display: none!important;
}

%close-button {
  display: block;
  position: absolute;
  top: 4.5rem;
  right: $gutterWidth;
  height: 4rem;
  width: 4rem;
  background-color: transparent;
  border: 0;
  padding: 0;
  outline: none;
  cursor: pointer;
  overflow: visible;

  span {
    position: absolute;
    display: block;
    height: .4rem;
    width: 100%;
    top: 50%;
    left: 50%;

    &:first-child {
      transform: translate(-50%, -50%) rotate(45deg);
    }
    &:last-child {
      transform: translate(-50%, -50%) rotate(-45deg);
    }
  }
}

.parsley-errors-list {
  position: absolute;
  list-style: none!important;
  padding: 0!important;
  top: calc(100% + .5rem);
  margin-bottom: 0!important;

  li {
    padding: 0!important;
    font-size: 1.2rem;
    margin-bottom: 0!important;

    &:before {
      content: '';
    }
  }
}

//------------------------------------------------------------------
// Theme Colurs
//------------------------------------------------------------------

// 
// Object
// 

$theme-map: (
    'black': '#000000',
    'white': '#ffffff',
    'primary': '#0093cc',
    'secondary': '#015d92',
    'tertiary': '#b2b2b2',
);

//------------------------------------------------------------------
// Theme Colour Class Generator
//------------------------------------------------------------------

// 
// Array
// 

// List our styles we want to alter with our classes
$style-list: 'color', 'background-color', 'border-color', 'fill', 'stroke';

// For each of the themes listed in $theme-map
@each $theme, $colors in $theme-map {
    
    // Loop each of the colours listed in each theme colour
    @each $color, $value in $colors {
        
        // Class to show we're interested in grabbing the theme colour :)
        // e.g siteTheme--primary
        .siteTheme--#{$color} {
            // We then give the element a class name relevant to the style we are changing, e.g background-color
            // an element with the class siteTheme--primary & background-color will be given the style background-color: #0093cc;
            @each $style in $style-list {
                &.#{$style} {
                    #{$style}: $value;
                }
            }
        }
    }
}