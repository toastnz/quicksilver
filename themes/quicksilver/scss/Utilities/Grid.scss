// ---------------------------------------------
// Default Settings
// ---------------------------------------------

$globalWidth: 110rem;
$globalWidthPX: 1100px;
$globalWidthMax: 144rem;
$globalWidthMaxPX: 1440px;
$columnCount: 12;
$rowClasses: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12;
$columnClasses: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12;
$gutterWidth: 2rem;

$breakpoint-map: (
  'xxs': $xxs,
  'xs': $xs,
  'sm': $sm,
  'md': $md,
  'xmd': $xmd,
  'lg': $lg,
  'xl': $xl,
  'xxl': $xxl,
  'xxxl': $xxxl,
);

$grid-map: (
  'init': 0,
);

// ---------------------------------------------
// The Grid
// ---------------------------------------------

@mixin TheGrid {
  $breakpoints: map-merge($grid-map, $breakpoint-map);

  .row {

    @include clearfix;
    width: 100%;
    max-width: $globalWidth;
    margin: 0 auto;

    &.max {
      max-width: $globalWidthMax;
    }

    &.explode {
      max-width: none;
    }

    &.collapse {
      > .column {
        padding-left: 0;
        padding-right: 0;

        > .row {
          width: 100%;
          margin-left: 0;
          margin-right: 0;
        }
      }
    }

    &.centered {
      font-size: 0;
      text-align: center;

      .column {
        display: inline-block;
        vertical-align: top;
        float: none;
      }
    }

    .row {
      max-width: none;
    }
  }

  .column {
    width: 100%;
    float: left;
    padding-left: $gutterWidth;
    padding-right: $gutterWidth;

    &.centered {
      float: none;
      margin-left: auto;
      margin-right: auto;
    }

    > .row:not(.collapse) {
      width: calc(100% + #{$gutterWidth * 2});
      margin-left: -#{$gutterWidth};
      margin-right: -#{$gutterWidth};
    }
  }

  // ---------------------------------------------
  // Breakpoints
  // ---------------------------------------------

  // ---------------------------------------------
  // Row Classes

  @if($rowClasses) {
    .row {
      @each $bp, $value in $breakpoints {
        @include media($value) {
          @each $i in $rowClasses {
            // @for $i from 1 through $columnCount {
            &.#{$bp}-up-#{$i} {
              > .column {
                $j: $columnCount / $i;
                width: percentage($j / $columnCount);
              }
            }
          }
        }
      }
    }
  }

  // ---------------------------------------------
  // Column Sizes

  @if($columnClasses) {
    @each $bp, $value in $breakpoints {
      @include media($value) {
        @each $i in $columnClasses {
          // @for $i from 1 through $columnCount {
          .column {
            &.#{$bp}-#{$i} {
              width: percentage($i / $columnCount);
            }
          }
        }
      }
    }
  }
}

// ---------------------------------------------
// Column Classes
// ---------------------------------------------

@mixin ColumnClasses {
  $breakpoints: map-merge($breakpoint-map, $grid-map);
  
  @each $bp, $value in $breakpoints {

    @include media($value) {
      
      .column {

        &.#{$bp}-centered {
          float: none;
          margin: 0 auto;
        }

        &.#{$bp}-uncentered {
          float: left;
          margin: 0;
        }
      }

      @if($columnClasses) {
        @each $i in $columnClasses {
          // @for $i from 0 through $columnCount {
          .column {

            &.#{$bp}-#{$i} {
              width: percentage($i / $columnCount);
            }

            &.#{$bp}-pull-#{$i} {
              margin-right: -#{$i / $columnCount * 100} + 0.0%;
            }

            &.#{$bp}-push-#{$i} {
              margin-right: #{$i / $columnCount * 100} + 0.0%;
            }
          }
        }

        .column {

          &.#{$bp}-pull-0 {
            margin-left: 0;
          }

          &.#{$bp}-push-0 {
            margin-left: 0;
            margin-right: 0;
          }
        }
      }
    }
  }
}

// ---------------------------------------------
// Text Alignment
// ---------------------------------------------

@mixin TextAlignmentClasses($breakpoints: false) {
  .text-left {
    text-align: left;
  }

  .text-right {
    text-align: right;
  }

  .text-center {
    text-align: center;
  }
  
  @if($breakpoints) {
    @each $bp, $value in $breakpoints {
      @include media($value) {
        .#{$bp}-text-left {
          text-align: left;
        }

        .#{$bp}-text-right {
          text-align: right;
        }

        .#{$bp}-text-center {
          text-align: center;
        }
      }
    }
  }
}

// ---------------------------------------------
// Float Classes
// ---------------------------------------------

@mixin FloatClasses($breakpoints: false) {

  .float-left {
    float: left!important;
  }

  .float-right {
    float: right!important;
  }

  .float-none {
    float: none!important;
  }
  
  @if($breakpoints) {
    @each $bp, $value in $breakpoints {

      @include media($value) {

        .#{$bp}-float-left {
          float: left!important;
        }

        .#{$bp}-float-right {
          float: right!important;
        }

        .#{$bp}-float-none {
          float: none!important;
        }
      }
    }
  }
}

// ---------------------------------------------
// Show/Hide
// ---------------------------------------------
@mixin ShowHideClasses($breakpoints: false) {

  .hide {
    display: none!important;
  }
  
  @if($breakpoints) {
    @each $bp, $value in $breakpoints {
      
      @include media($value, max) {    
        .show-for-#{$bp} {
          display: none!important;
        }
      }

      @include media($value) {
        .hide-for-#{$bp} {
          display: none!important;
        }
      }
    }
  }
}

// ---------------------------------------------
// Table Aignment
// ---------------------------------------------

@mixin TableAlignmentStyles {
  display: table;

  &--fixed,
  &.row {
    table-layout: fixed;
  }

  &:not(.column) {
    width: 100%;
  }

  > .contentRow {
    display: table-row;
  }

  > .verticalAlign,
  > .contentRow > .verticalAlign {
    display: table-cell;
    vertical-align: middle;
    float: none;
    &--top {
      vertical-align: top;
    }
    &--bottom {
      vertical-align: bottom;
    }
  }
}

@mixin TableAlignmentClasses($breakpoints: false) {
  
  .alignContent {
    @include TableAlignmentStyles;
  }
  
  @if($breakpoints) {
    @each $bp, $value in $breakpoints {
      @include media($value) {
        .#{$bp}-up-alignContent {
          @include TableAlignmentStyles;
        }
      }
    }
  }
}

// ---------------------------------------------
// Mobile First Float Grid
// ---------------------------------------------

// Classes work in conjuntion with $breakpoints

// .row elements with class .explode will take full width - it will not be restricted by $globalWidth or $globalWidthMax
// .row elements with class .max will take full width up until it reaches $globalWidthMax 
// .row elements with class .collapse will remove the gutters from the row and from all columns within
// .row elements can sit within .column elements like so .row > .column .row > .column

// .column elements sit inside the .row
// By default they will have width 100%
// Otherwise widths can be given by specifying the number of columns it should take up
// The classes work as such:
// .init-6 will give the .column percentage(6/$columnCount) - if the number of $columnCount is 12, it will take 50% of the space from init breakpoint up (0px);
// adding the class .md-4 will cause the .column.init-6 to now only take up 4/12 columns from md screen sizes up.

// If the columns in the design are in a perfect grid, to save time adding .md-up-4 to a .row element will cause there to be 4 columns in the grid from md screen sizes up
// So .row.sm-2.lg-3.xxl-4 will have 2 columns on sm, 3 columns on lg and 4 columns on xxl

// Say you want to have a 2 column space between a .column.init-6 and a .column.init-4 you can add .init-push-2 to .column.init-4
// This gives the column a margin of 2 column widths to provide that extra space.

// If we want to pull that column closer instead, you can use .init-pull-4 for example.
// 0 is also a valid pull/push option
// .init-pull-2 could then have .md-pull-0 to reset it's margin at a larger breakpoint

// If a column is only 6/12 with no siblings, it will sit to the left of the row
// However we can center it by using either just the class .centered, or be more specific and say .md-centered then .xl-uncentered

// Offsetting the .row can be useful for when the design has one side on the screen edge while the other remains inline with the $globalWidth
// The Offset applies to the .row, rather than the .column
// Simply add .offset--left or .offset--right to the row to have this functionality