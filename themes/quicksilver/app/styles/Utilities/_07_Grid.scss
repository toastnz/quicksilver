$globalWidth: 131rem;
$globalWidthPX: 1310px;
$globalWidthMax: 192rem;
$globalWidthMaxPX: 1920px;
$columnCount: 12;
$gutterWidth: 2rem;

// ---------------------------------------------
// Mobile First Float Grid
// ---------------------------------------------

// Classes work in conjuntion with $breakpoints

// .row elements with class .explode will take full width - it will not be restricted by $globalWidth or $globalWidthMax
// .row elements with class .max will take full width up until it reaches $globalWidthMax 
// .row elements with class .collapse will remove the gutters from the row and from all columns within
// .row elements can sit within .column elements like so .row > .column .row > .column

// .column elements sit inside the .row
// By default they will have width 100%
// Otherwise widths can be given by specifying the number of columns it should take up
// The classes work as such:
// .init-6 will give the .column percentage(6/$columnCount) - if the number of $columnCount is 12, it will take 50% of the space from init breakpoint up (0px);
// adding the class .md-4 will cause the .column.init-6 to now only take up 4/12 columns from md screen sizes up.

// If the columns in the design are in a perfect grid, to save time adding .md-up-4 to a .row element will cause there to be 4 columns in the grid from md screen sizes up
// So .row.sm-2.lg-3.xxl-4 will have 2 columns on sm, 3 columns on lg and 4 columns on xxl

// Say you want to have a 2 column space between a .column.init-6 and a .column.init-4 you can add .init-push-2 to .column.init-4
// This gives the column a margin of 2 column widths to provide that extra space.

// If we want to pull that column closer instead, you can use .init-pull-4 for example.
// 0 is also a valid pull/push option
// .init-pull-2 could then have .md-pull-0 to reset it's margin at a larger breakpoint

// If a column is only 6/12 with no siblings, it will sit to the left of the row
// However we can center it by using either just the class .centered, or be more specific and say .md-centered then .xl-uncentered

// Offsetting the .row can be useful for when the design has one side on the screen edge while the other remains inline with the $globalWidth
// The Offset applies to the .row, rather than the .column
// Simply add .offset--left or .offset--right to the row to have this functionality

%gutters,
.gutters {
  padding-left: $gutterWidth;
  padding-right: $gutterWidth;
}


// To add space to the bottom of a column that's equal to the $gutterWidth add this class or extend it
%gutterBottom,
.gutterBottom {
  padding-bottom: #{$gutterWidth * 2};
}

.row {
  @include clearfix;
  width: 100%;
  max-width: $globalWidth;
  margin: 0 auto;

  &.explode {
    max-width: none;
  }

  &.max {
    max-width: #{$globalWidthMax / 100 * 80};
    @include media(2000px) {
      max-width: $globalWidthMax;
    }
    &.offset {
      // display: none;
      max-width: calc(50vw + #{($globalWidthMax / 100 * 80) / 2});
      @include media(2000px) {
        max-width: calc(50vw + #{$globalWidthMax / 2});
      }
    }
  }

  &.offset {
    max-width: calc(50vw + #{($globalWidth / 100 * 80) / 2});
    @include media(2000px) {
      max-width: calc(50vw + #{$globalWidth / 2});
    }

    &--left {
      float: left;
      margin-left: 0;
    }

    &--right {
      float: right;
      margin-right: 0;
    }
  }

  &:not(.collapse) {

    &.gutters {
      max-width: #{$globalWidth - ($gutterWidth * 2)};
    }

    .column {
      padding-left: $gutterWidth;
      padding-right: $gutterWidth;

      .row:not(.collapse) {
        width: calc(100% + #{$gutterWidth * 2});
        margin-left: -#{$gutterWidth};
        margin-right: -#{$gutterWidth};
      }
    }
  }
  .column {
    width: 100%;

    &:not(.verticalAlign) {
      float: left;
    }

    &.gutters {
      padding-left: $gutterWidth;
      padding-right: $gutterWidth;
    }

    &.centered {
      float: none;
      margin-left: auto;
      margin-right: auto;
    }

    &.gutter-bottom {
      @extend %gutterBottom;
    }

  }

  // ---------------------------------------------
  // Row Classes
  // ---------------------------------------------

  @each $bp, $value in $breakpoints {

    @include media($value) {

      &.#{$bp}-up-offset {
        
        max-width: calc(50vw + #{$globalWidth / 2});

        &.offset--left {
          float: left;
          margin-left: 0;
        }

        &.offset--right {
          float: right;
          margin-right: 0;
        }
      }

      @for $i from 1 through $columnCount {

        &.#{$bp}-up-#{$i} {

          > .column {
            $j: $columnCount / $i;
            width: percentage($j / $columnCount);
          }
        }
      }
    }
  }

  // ---------------------------------------------
  // Column Classes
  // ---------------------------------------------
  @each $bp, $value in $breakpoints {

    @include media($value) {

      .column {

        &.#{$bp}-centered {
          float: none;
          margin: 0 auto;
        }
        &.#{$bp}-uncentered {
          float: left;
          margin: 0;
        }
      }
      @for $i from 0 through $columnCount {
        .column {

          @if $i != 0 {

            &.#{$bp}-#{$i} {
              width: percentage($i / $columnCount);
            }
          }
          @if $i == 0 {

            &.#{$bp}-pull-#{$i} {
              margin-left: 0;
            }

            &.#{$bp}-push-#{$i} {
              margin-left: 0;
              margin-right: 0;
            }

          }@else {

            &.#{$bp}-pull-#{$i} {
              margin-left: -#{$i / $columnCount * 100}#{%};
            }

            &.#{$bp}-push-#{$i} {
              margin-left: percentage($i / $columnCount);
              // margin-right: -#{$i / $columnCount * 100}#{%};
            }
          }
        }
      }
    }
  }
}

// ---------------------------------------------
// Float Classes
// ---------------------------------------------
.float-left {
  float: left!important;
}

.float-right {
  float: right!important;
}

.float-none {
  float: none!important;
}

@each $bp, $value in $breakpoints {

  @include media($value) {

    .#{$bp}-float-left {
      float: left!important;
    }

    .#{$bp}-float-right {
      float: right!important;
    }

    .#{$bp}-float-none {
      float: none!important;
    }
  }
}

// ---------------------------------------------
// Show/Hide
// ---------------------------------------------
.hide {
  display: none;
}
@each $bp, $value in $breakpoints {

  .show-for-#{$bp} {
    display: none;

    @include media($value) {
      display: block;
    }

    &--inline {
      display: none;
      @include media($value) {
        display: inline;
      }
    }

    &--inline-block {
      display: none;
      @include media($value) {
        display: inline-block;
      }
    }
  }

  .hide-for-#{$bp} {

    @include media($value) {
      display: none;
    }
  }
}

// ---------------------------------------------
// Flex Grid - Under Dev
// ---------------------------------------------

.flex-row {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;

  > .column {
    flex: 0 0 100%;
  }

  @each $bp, $value in $breakpoints {

    @include media($value) {

      @for $i from 1 through $columnCount {

        &.#{$bp}-up-#{$i} {

          > .column {
            $j: $columnCount / $i;
            flex: 0 0 percentage($j / $columnCount);
          }
        }
      }
    }
  }
}

// ---------------------------------------------
// Table Aignment
// ---------------------------------------------

.alignContent {
  display: table;
  height: 100%;

  &--fixed,
  &.row {
    table-layout: fixed;
  }

  &:not(.column) {
    width: 100%;
  }

  >.verticalAlign {
    display: table-cell;
    vertical-align: middle;
    &--bottom {
      vertical-align: bottom;
    }
  }
}

@each $bp, $value in $breakpoints {

  @include media($value) {

    .#{$bp}-up-alignContent {
      display: table;
      height: 100%;

      &--fixed,
      .row {
        table-layout: fixed;
      }

      &:not(.column) {
        width: 100%;
      }

      >.verticalAlign {
        display: table-cell;
        vertical-align: middle;
        &--bottom {
          vertical-align: bottom;
        }
      }
    }
  }
}

%contentBlock {
  margin-top: 8rem;
  margin-bottom: 8rem;
}